var documenterSearchIndex = {"docs":
[{"location":"pages/constants/#HTTP-status-codes","page":"Constants","title":"HTTP status codes","text":"","category":"section"},{"location":"pages/constants/","page":"Constants","title":"Constants","text":"EasyCurl.HTTP_STATUS_CODES","category":"page"},{"location":"pages/constants/#EasyCurl.HTTP_STATUS_CODES","page":"Constants","title":"EasyCurl.HTTP_STATUS_CODES","text":"HTTP_STATUS_CODES\n\nA dictionary that maps HTTP status codes to their corresponding messages:\n\n100 - CONTINUE\n101 - SWITCHING_PROTOCOLS\n102 - PROCESSING\n103 - EARLY_HINTS\n200 - OK\n201 - CREATED\n202 - ACCEPTED\n203 - NON_AUTHORITATIVE_INFORMATION\n204 - NO_CONTENT\n205 - RESET_CONTENT\n206 - PARTIAL_CONTENT\n207 - MULTI_STATUS\n208 - ALREADY_REPORTED\n226 - IM_USED\n300 - MULTIPLE_CHOICES\n301 - MOVED_PERMANENTLY\n302 - FOUND\n303 - SEE_OTHER\n304 - NOT_MODIFIED\n307 - TEMPORARY_REDIRECT\n308 - PERMANENT_REDIRECT\n400 - BAD_REQUEST\n401 - UNAUTHORIZED\n402 - PAYMENT_REQUIRED\n403 - FORBIDDEN\n404 - NOT_FOUND\n405 - METHOD_NOT_ALLOWED\n406 - NOT_ACCEPTABLE\n407 - PROXY_AUTHENTICATION_REQUIRED\n408 - REQUEST_TIMEOUT\n409 - CONFLICT\n410 - GONE\n411 - LENGTH_REQUIRED\n412 - PRECONDITION_FAILED\n413 - PAYLOAD_TOO_LARGE\n414 - URI_TOO_LONG\n415 - UNSUPPORTED_MEDIA_TYPE\n416 - RANGE_NOT_SATISFIABLE\n417 - EXPECTATION_FAILED\n418 - IM_A_TEAPOT\n421 - MISDIRECTED_REQUEST\n422 - UNPROCESSABLE_ENTITY\n423 - LOCKED\n424 - FAILED_DEPENDENCY\n425 - TOO_EARLY\n426 - UPGRADE_REQUIRED\n428 - PRECONDITION_REQUIRED\n429 - TOO_MANY_REQUESTS\n431 - REQUEST_HEADER_FIELDS_TOO_LARGE\n451 - UNAVAILABLE_FOR_LEGAL_REASONS\n500 - INTERNAL_SERVER_ERROR\n501 - NOT_IMPLEMENTED\n502 - BAD_GATEWAY\n503 - SERVICE_UNAVAILABLE\n504 - GATEWAY_TIMEOUT\n505 - HTTP_VERSION_NOT_SUPPORTED\n506 - VARIANT_ALSO_NEGOTIATES\n507 - INSUFFICIENT_STORAGE\n508 - LOOP_DETECTED\n510 - NOT_EXTENDED\n511 - NETWORK_AUTHENTICATION_REQUIRED\n\n\n\n\n\n","category":"constant"},{"location":"pages/error_handling/#Error-handling","page":"For Developers","title":"Error handling","text":"","category":"section"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"If the problem occurs on the EasyCurl side then EasyCurlError exception will be thrown.","category":"page"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"EasyCurl.EasyCurlError","category":"page"},{"location":"pages/error_handling/#EasyCurl.EasyCurlError","page":"For Developers","title":"EasyCurl.EasyCurlError","text":"EasyCurlError{code} <: Exception\n\nType that is returned if curl_request fails on the libcurl side.\n\nFields\n\ncode::UInt32: The error code (see libcurl error codes).\nmessage::String: The error message.\n\nExamples\n\njulia> curl_request(\"GET\", \"http://httpbin.org/status/400\", interface = \"9.9.9.9\")\nERROR: EasyCurlError{45}(Failed binding local connection end)\n[...]\n\njulia> curl_request(\"GET\", \"http://httpbin.org/status/400\", interface = \"\")\nERROR: EasyCurlError{7}(Couldn't connect to server)\n[...]\n\n\n\n\n\n","category":"type"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"Or, if the problem was caused by HHTP, a EasyCurlStatusError exception will be thrown.","category":"page"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"EasyCurl.EasyCurlStatusError","category":"page"},{"location":"pages/error_handling/#EasyCurl.EasyCurlStatusError","page":"For Developers","title":"EasyCurl.EasyCurlStatusError","text":"EasyCurlStatusError{code} <: Exception\n\nType that is returned if curl_request fails on the HTTP side.\n\nFields\n\ncode::Int64: The HTTP error code (see HTTP_STATUS_CODES).\nmessage::String: The error message.\nresponse::Response: The HTTP response object.\n\nExamples\n\njulia> curl_request(\"GET\", \"http://httpbin.org/status/400\", interface = \"0.0.0.0\")\nERROR: EasyCurlStatusError{400}(BAD_REQUEST)\n[...]\n\njulia> curl_request(\"GET\", \"http://httpbin.org/status/404\", interface = \"0.0.0.0\")\nERROR: EasyCurlStatusError{404}(NOT_FOUND)\n[...]\n\n\n\n\n\n","category":"type"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"Below is a small example of error handling.","category":"page"},{"location":"pages/error_handling/#Example","page":"For Developers","title":"Example","text":"","category":"section"},{"location":"pages/error_handling/","page":"For Developers","title":"For Developers","text":"using EasyCurl\n\nheaders = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\",\n]\n\ntry\n    response = curl_request(\"GET\", \"http://httpbin.org/status/400\", query = \"echo=你好嗎\",\n        headers = headers, interface = \"0.0.0.0\", read_timeout = 30, retries = 1)\n    # If the request is successful, you can process the response here\n    # ...\ncatch e\n    if isa(e, EasyCurlError{EasyCurl.CURLE_COULDNT_CONNECT})\n        # Handle the case where the connection to the server could not be made\n    elseif isa(e, EasyCurlError{EasyCurl.CURLE_OPERATION_TIMEDOUT})\n        # Handle the case where the operation timed out\n    elseif isa(e, EasyCurlStatusError{400})\n        # Handle a 400 Bad Request error specifically\n        rethrow(e)\n    end\nend","category":"page"},{"location":"#EasyCurl.jl","page":"Home","title":"EasyCurl.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EasyCurl is a lightweight Julia package that provides a user-friendly wrapper for the libcurl C library, for making HTTP requests. It is useful for sending HTTP requests, especially when dealing with RESTful APIs.","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the example, a POST request is sent to http://httpbin.org/post using the 0.0.0.0 network interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EasyCurl\n\nheaders = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\n# 'interface' argument specifies the network interface to use for the request\n# 'read_timeout' and 'connect_timeout' define how long to wait for a response or connection\n# 'retries' argument specifies how many times to retry the request if it fails initially\n\nresponse = curl_request(\"POST\", \"http://httpbin.org/post\";\n    headers = headers,\n    query = \"qry=你好嗎\",\n    body = \"{\\\"data\\\":\\\"hi\\\"}\",\n    interface = \"0.0.0.0\",\n    read_timeout = 5,\n    connect_timeout = 10,\n    retries = 10,\n)\n\n# Get the response 'status'\ncurl_status(response)\n\n# Get and parse the response 'body' to a string\nString(curl_body(response))","category":"page"},{"location":"pages/api_reference/#Client-Requests","page":"API Reference","title":"Client Requests","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"curl_request\ncurl_get\ncurl_put\ncurl_post\ncurl_head\ncurl_patch\ncurl_delete","category":"page"},{"location":"pages/api_reference/#EasyCurl.curl_request","page":"API Reference","title":"EasyCurl.curl_request","text":"curl_request(method::AbstractString, url::AbstractString; kw...) -> EasyCurl.Response\n\nSend a url HTTP Request using as method one of \"GET\", \"POST\", etc. and return a EasyCurl.Response object.\n\nKeyword arguments\n\nheaders = Pair{String,String}[]: The headers for the request.\nbody = nothing: The body for the request.\nquery = nothing: The query string for the request.\ninterface = nothing: The interface for the request.\nstatus_exception = true: Whether to throw an exception if the response status code indicates an error.\nconnect_timeout = 60: The connect timeout for the request in seconds.\nread_timeout = 300: The read timeout for the request in seconds.\nretries = 1: The number of times to retry the request if an error occurs.\nproxy = nothing: Which proxy to use for the request.\naccept_encoding = \"gzip\": Encoding to accept.\nverbose::Bool = false: Enables verbose output from EasyCurl for debugging.\nssl_verifypeer = true: Whether peer need to be verified.\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_request(\"POST\", \"http://httpbin.org/post\", headers = headers, query = \"qry=你好嗎\",\n    body = \"{\\\"data\\\":\\\"hi\\\"}\", interface = \"en0\", read_timeout = 5, connect_timeout = 10, retries = 10)\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"headers\": {\n    \"X-Amzn-Trace-Id\": \"Root=1-6588a009-19f3dc0321bee38106226bb3\",\n    \"Content-Length\": \"13\",\n    \"Host\": \"httpbin.org\",\n    \"Accept\": \"*/*\",\n    \"Content-Type\": \"application/json\",\n    \"Accept-Encoding\": \"gzip\",\n    \"User-Agent\": \"EasyCurl.jl\"\n  },\n  \"json\": {\n    \"data\": \"hi\"\n  },\n  \"files\": {},\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"data\": \"{\\\"data\\\":\\\"hi\\\"}\",\n  \"url\": \"http://httpbin.org/post?qry=你好嗎\",\n  \"form\": {},\n  \"origin\": \"100.250.50.140\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_get","page":"API Reference","title":"EasyCurl.curl_get","text":"curl_get(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"GET\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_get(\"http://httpbin.org/get\", headers = headers,\n    query = Dict{String,String}(\"qry\" => \"你好嗎\"))\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"EasyCurl.jl\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6589e259-24815d6d62da962a06fc7edf\"\n  },\n  \"origin\": \"100.250.50.140\",\n  \"url\": \"http://httpbin.org/get?qry=你好嗎\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_put","page":"API Reference","title":"EasyCurl.curl_put","text":"curl_put(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"PUT\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_put(\"http://httpbin.org/put\", headers = headers,\n    query = \"qry=你好嗎\", body = \"{\\\"data\\\":\\\"hi\\\"}\")\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"data\": \"{\\\"data\\\":\\\"hi\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Content-Length\": \"13\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"EasyCurl.jl\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6589e3b0-58cdde84399ad8be30eb4e46\"\n  },\n  \"json\": {\n    \"data\": \"hi\"\n  },\n  \"origin\": \"100.250.50.140\",\n  \"url\": \"http://httpbin.org/put?qry=你好嗎\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_post","page":"API Reference","title":"EasyCurl.curl_post","text":"curl_post(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"POST\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_post(\"http://httpbin.org/post\", headers = headers,\n    query = \"qry=你好嗎\", body = \"{\\\"data\\\":\\\"hi\\\"}\")\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"data\": \"{\\\"data\\\":\\\"hi\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Content-Length\": \"13\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"EasyCurl.jl\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6589e32c-7f09b85d56e11aea59cde1d6\"\n  },\n  \"json\": {\n    \"data\": \"hi\"\n  },\n  \"origin\": \"100.250.50.140\",\n  \"url\": \"http://httpbin.org/post?qry=你好嗎\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_head","page":"API Reference","title":"EasyCurl.curl_head","text":"curl_head(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"HEAD\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_head(\"http://httpbin.org/get\", headers = headers,\n    query = \"qry=你好嗎\", interface = \"0.0.0.0\")\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response)\nUInt8[]\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_patch","page":"API Reference","title":"EasyCurl.curl_patch","text":"curl_patch(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"PATCH\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_patch(\"http://httpbin.org/patch\", headers = headers,\n    query = \"qry=你好嗎\", body = \"{\\\"data\\\":\\\"hi\\\"}\")\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"data\": \"{\\\"data\\\":\\\"hi\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Content-Length\": \"13\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"EasyCurl.jl\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6589e410-33f8cb5a31db9fba6c0a746f\"\n  },\n  \"json\": {\n    \"data\": \"hi\"\n  },\n  \"origin\": \"100.250.50.140\",\n  \"url\": \"http://httpbin.org/patch?qry=你好嗎\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_delete","page":"API Reference","title":"EasyCurl.curl_delete","text":"curl_delete(url::AbstractString; kw...) -> EasyCurl.Response\n\nShortcut for curl_request function, work similar to curl_request(\"DELETE\", url; kw...).\n\nExamples\n\njulia> headers = Pair{String,String}[\n    \"User-Agent\" => \"EasyCurl.jl\",\n    \"Content-Type\" => \"application/json\"\n]\n\njulia> response = curl_delete(\"http://httpbin.org/delete\", headers = headers,\n    query = \"qry=你好嗎\", body = \"{\\\"data\\\":\\\"hi\\\"}\")\n\njulia> curl_status(response)\n200\n\njulia> curl_body(response) |> String |> print\n{\n  \"args\": {\n    \"qry\": \"你好嗎\"\n  },\n  \"data\": \"{\\\"data\\\":\\\"hi\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Content-Length\": \"13\",\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"EasyCurl.jl\",\n    \"X-Amzn-Trace-Id\": \"Root=1-6589e5f7-1c1ff2407f567ff17786576d\"\n  },\n  \"json\": {\n    \"data\": \"hi\"\n  },\n  \"origin\": \"100.250.50.140\",\n  \"url\": \"http://httpbin.org/delete?qry=你好嗎\"\n}\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Request/Response-types","page":"API Reference","title":"Request/Response types","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"EasyCurl.Request\nEasyCurl.Response","category":"page"},{"location":"pages/api_reference/#EasyCurl.Request","page":"API Reference","title":"EasyCurl.Request","text":"Request\n\nRepresents an HTTP request object.\n\nFields\n\nmethod::String: The HTTP request method (e.g. \"GET\", \"POST\", etc.).\nurl::String: The URL to which the request is sent.\nheaders::Vector{Pair{String, String}}: Headers for the HTTP request.\nbody::Vector{UInt8}: The request body as a vector of bytes.\nconnect_timeout::Real: The connection timeout for the request in seconds.\nread_timeout::Real: The read timeout for the response in seconds.\ninterface::Union{String, Nothing}: The network interface to use (or nothing for the default).\nproxy::Union{String, Nothing}: The proxy server to use (or nothing for no proxy).\naccept_encoding::String: The accepted encoding for the response (e.g., \"gzip\").\nssl_verifypeer::Bool: Whether to verify SSL certificates.\nverbose::Bool: Enables verbose output from EasyCurl for debugging.\nrq_curl::Ptr{CURL}: A pointer to a EasyCurl handle for the request.\nrq_multi::Ptr{CURL}: A pointer to a EasyCurl multi handle for the request.\nresponse::CurlResponse: The HTTP response associated with this request.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#EasyCurl.Response","page":"API Reference","title":"EasyCurl.Response","text":"EasyCurl.Response(x::CurlResponse)\n\nRepresents an HTTP response object that can be received from a CurlResponse.\n\nFields\n\nstatus::Int64: The HTTP status code of the response.\nrequest_time::Float64: The time taken for the HTTP request in seconds.\nheaders::Vector{Pair{String,String}}: Headers received in the HTTP response.\nbody::Vector{UInt8}: The response body as a vector of bytes.\n\nSee also: curl_status, curl_request_time, curl_headers, curl_body, curl_iserror\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#Advanced-Topics","page":"API Reference","title":"Advanced Topics","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"curl_status\ncurl_request_time\ncurl_headers\ncurl_body\ncurl_iserror\nEasyCurl.joinurl","category":"page"},{"location":"pages/api_reference/#EasyCurl.curl_status","page":"API Reference","title":"EasyCurl.curl_status","text":"curl_status(x::Response) -> Int64\n\nExtracts the HTTP status code from a EasyCurl.Response object.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_request_time","page":"API Reference","title":"EasyCurl.curl_request_time","text":"curl_request_time(x::Response) -> Float64\n\nExtracts the request time from a EasyCurl.Response object.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_headers","page":"API Reference","title":"EasyCurl.curl_headers","text":"curl_headers(x::Response) -> Vector{Pair{String,String}}\n\nParses the HTTP headers from a EasyCurl.Response object.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_body","page":"API Reference","title":"EasyCurl.curl_body","text":"curl_body(x::Response) -> Vector{UInt8}\n\nExtracts the response body from a EasyCurl.Response object.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.curl_iserror","page":"API Reference","title":"EasyCurl.curl_iserror","text":"curl_iserror(x::Response) -> Bool\n\nCheck that EasyCurl.Response have an error status\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.joinurl","page":"API Reference","title":"EasyCurl.joinurl","text":"EasyCurl.joinurl(basepart::AbstractString, parts::AbstractString...)::String\n\nConstruct a URL by concatenating a base part with one or more path segments. This function ensures that each segment is separated by a single forward slash (/), regardless of whether the basepart or parts already contain slashes at their boundaries.\n\nExamples\n\njulia> EasyCurl.joinurl(\"http://example.com\", \"path\")\n\"http://example.com/path\"\n\njulia> EasyCurl.joinurl(\"http://example.com/\", \"/path/to/resource\")\n\"http://example.com/path/to/resource\"\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Encode/decode","page":"API Reference","title":"Encode/decode","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"EasyCurl.urlencode\nEasyCurl.urldecode","category":"page"},{"location":"pages/api_reference/#EasyCurl.urlencode","page":"API Reference","title":"EasyCurl.urlencode","text":"EasyCurl.urlencode(s::AbstractString)\n\nEncode a string s into URI using only the US-ASCII characters legal within a URI.\n\nExamples\n\njulia> EasyCurl.urlencode(\"[curl]\")\n\"%5Bcurl%5D\"\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#EasyCurl.urldecode","page":"API Reference","title":"EasyCurl.urldecode","text":"EasyCurl.urldecode(s::AbstractString)\n\nDecode an encoded URI string s back to normal string.\n\nExamples\n\njulia> EasyCurl.urldecode(\"%5Bcurl%5D\")\n\"[curl]\"\n\n\n\n\n\n","category":"function"}]
}
